#+TITLE: Emacs Configuration
#+AUTHOR: Ben Weintraub
#+EMAIL: ben@weintraub.xyz
#+OPTIONS: num:nil
#+PROPERTY: header-args:emacs-lisp :noweb yes :results none

#+begin_src emacs-lisp
  (defun blw/set-macos-vars ()
    (setq blw/open-firefox "open -a Firefox")
    (setq blw/screenshot "screencapture -i %s")

    ;; Bind =alt= to =super=
    (setq ns-alternate-modifier (quote super))

    ;; Bind =command= to =meta=
    (setq ns-command-modifier (quote meta))

    ;; Bind =fn= to =control=
    (setq ns-function-modifier (quote control)))

  (defun blw/set-linux-vars ()
    (setq blw/open-firefox "firefox --newtab --url")
    (setq blw/screenshot "scrot --select %s"))

  (defun blw/set-system-specific-vars ()
    (cond
     ((string-equal system-type "darwin") ;  macOS
      (blw/set-macos-vars))
     ((string-equal system-type "gnu/linux")
      (blw/set-linux-vars))))

  (blw/set-system-specific-vars)
#+end_src

#+begin_src emacs-lisp
  (setq user-full-name "Ben Weintraub"
        user-mail-address "ben@weintraub.xyz"
        calendar-latitude 42.35
        calendar-longitude -71.06
        calendar-location-name "Boston, MA"
        blw/dark-theme 'doom-one
        blw/light-theme 'doom-one-light)
#+end_src

Define a big ol' bunch of handy utility functions.

#+begin_src emacs-lisp
  (defun hrs/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (if filename
          (progn
            (when (buffer-modified-p)
              (save-buffer))
            (rename-file filename new-name t)
            (kill-buffer (current-buffer))
            (find-file new-name)
            (message "Renamed '%s' -> '%s'" filename new-name))
        (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun hrs/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
         name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun hrs/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

  (defun hrs/notify-send (title message)
    "Display a desktop notification by shelling out to `notify-send'."
    (call-process-shell-command
     (format "notify-send -t 2000 \"%s\" \"%s\"" title message)))
#+end_src

I'm currently using the "solarized-dark" theme. I've got a scenic wallpaper, so
just a hint of transparency looks lovely and isn't distracting or hard to read.
I also use the interactive command =apply-light-theme= when the screen is hard
to see (like out in the sun).

#+begin_src emacs-lisp
  (defun blw/apply-dark-theme ()
    "Apply the dark theme."
    (interactive)
    (load-theme blw/dark-theme t))

  (defun blw/apply-light-theme ()
    "Apply the light theme."
    (interactive)
    (load-theme blw/light-theme t))

  (use-package doom-themes
    :config
    (blw/apply-dark-theme))
#+end_src

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src


When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src


I'm partial to Inconsolata.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+begin_src emacs-lisp
  (setq hrs/default-font "Inconsolata")
  (setq hrs/default-font-size 24)
  (setq hrs/current-font-size hrs/default-font-size)

  (setq hrs/font-change-increment 1.1)

  (defun hrs/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat hrs/default-font "-" (number-to-string hrs/current-font-size)))

  (defun hrs/set-font-size ()
    "Set the font to `hrs/default-font' at `hrs/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (hrs/font-code)))
      (if (assoc 'font default-frame-alist)
          (setcdr (assoc 'font default-frame-alist) font-code)
        (add-to-list 'default-frame-alist (cons 'font font-code)))
      (set-frame-font font-code)))

  (defun hrs/reset-font-size ()
    "Change font size back to `hrs/default-font-size'."
    (interactive)
    (setq hrs/current-font-size hrs/default-font-size)
    (hrs/set-font-size))

  (defun hrs/increase-font-size ()
    "Increase current font size by a factor of `hrs/font-change-increment'."
    (interactive)
    (setq hrs/current-font-size
          (ceiling (* hrs/current-font-size hrs/font-change-increment)))
    (hrs/set-font-size))

  (defun hrs/decrease-font-size ()
    "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq hrs/current-font-size
          (max 1
               (floor (/ hrs/current-font-size hrs/font-change-increment))))
    (hrs/set-font-size))

  (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
  (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
  (define-key global-map (kbd "C--") 'hrs/decrease-font-size)

  (hrs/reset-font-size)
#+end_src

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+begin_src emacs-lisp
  (use-package! diff-hl
    :defer t
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

Swap buffers with =C-S-<D-PAD DIRECTION>=

#+begin_src emacs-lisp
  (use-package! buffer-move
    :defer t)

  (global-set-key (kbd "<C-S-up>")     #'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   #'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   #'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  #'buf-move-right)
#+end_src

I prefer =IBuffer=, and have it mapped to =C-x C-b=
#+begin_src emacs-lisp
 (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Make full screen on startup, because this is the first thing I'm going to do anyway.

#+begin_src emacs-lisp
  (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src

I use =magit= to handle version control. It's lovely, but I tweak a few things:

- I bring up the status menu with =C-c m=.
- The default behavior of =magit= is to ask before pushing. I haven't had any
  problems with accidentally pushing, so I'd rather not confirm that every time.
- Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
  beyond 50 characters.
- I'd like to start in the insert state when writing a commit message.

#+begin_src emacs-lisp
  (use-package! magit
    :defer t
    :bind
    ("C-c m" . magit-status)

    :config
    (use-package with-editor)

    (setq magit-push-always-verify nil
          git-commit-summary-max-length 50))
#+end_src


Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds it to the
easier-to-type =C-c v= to useful searches.

Bind =C-p= to fuzzy-finding files in the current project. We also need to
explicitly set that in a few other modes.

I use =ivy= as my completion system.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+begin_src emacs-lisp
  (use-package! projectile
    :defer t
    :bind
    ("C-c v" . projectile-ag)

    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (setq projectile-completion-system 'ivy
          projectile-switch-project-action 'projectile-dired
          projectile-require-project-root nil))
#+end_src

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+begin_src emacs-lisp
  (use-package! subword
    :defer t
    :config (global-subword-mode 1))
#+end_src

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

Ripgrep is great for searching for text searches (much faster than grep). With
this package, I can use it without leaving emacs.
#+begin_src emacs-lisp
  (use-package! rg
    :defer t)
#+end_src

If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
documentation.

#+begin_src emacs-lisp
  (use-package! eldoc
    :defer t
    :config
    (add-hook! 'emacs-lisp-mode-hook 'eldoc-mode))
#+end_src

#+begin_src emacs-lisp
  (eshell-git-prompt-use-theme 'robbyrussell)
#+end_src

Automagically do an =ls= when entering a new directory.

#+begin_src emacs-lisp
(setq eshell-list-files-after-cd t)
#+end_src

Open new eshell prompt with =F1= key.

#+begin_src emacs-lisp
  (global-set-key [f1] 'eshell)
#+end_src

Emacs shells should inherit the PATH from the system shell.

#+begin_src emacs-lisp
  (use-package! exec-path-from-shell
    :defer t
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize))
#+end_src

Including =org-tempo= restores the =<s=-style easy-templates that were
deprecated in Org 9.2.

#+begin_src emacs-lisp
  (use-package! org-tempo
    :after org)
#+end_src

I'd like the initial scratch buffer to be in Org:

#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
#+end_src


Images should be shown in-buffer by default, but not at full size.

#+begin_src emacs-lisp
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width nil)
#+end_src


Use =notmuch= to read my email.
#+begin_src emacs-lisp
  (use-package! notmuch
    :defer t)

  (after! notmuch
    (setq message-default-mail-headers "Cc: \nBcc: \n"
          +notmuch-sync-backend 'mbsync
          notmuch-hello-sections `(notmuch-hello-insert-saved-searches
                                   notmuch-hello-insert-alltags)
          ;; The following three make sure that what email a message was addressed
          ;; to will be used as the from address in my reply.
          mail-specify-envelope-from t
          message-sendmail-envelope-from 'header
          mail-envelope-from 'header
          mail-user-agent 'message-user-agent
          sendmail-program "msmtp"

          notmuch-saved-searches
          '((:name "slimbox"
             :query "tag:unread AND NOT tag:scholarly-reading AND NOT tag:calnewport AND NOT tag:newyorker AND NOT tag:lightning-dev AND NOT tag:nu-unread"
             :key "i"
             :sort-order newest-first
             :search-type 'tree)
            (:name "inbox" :query "tag:inbox" :sort-order newest-first :search-type 'tree)
            (:name "unread" :query "tag:unread" :key "u" :sort-order newest-first :search-type 'tree)
            (:name "nu-unread" :query "to:weintraub.b@northeastern.edu AND tag:unread", :key "nu" :sort-order newest-first :search-type 'tree)
            (:name "calnewport" :query "tag:calnewport AND tag:unread" :key "cn" :sort-order newest-first :search-type 'tree)
            (:name "lightning-dev" :query "tag:lightning-dev AND tag:unread" :sort-order newest-first :key "l" :search-type 'tree)
            (:name "newyorker" :query "tag:newyorker AND tag:unread" :sort-order  newest-first :key "ny" :search-type 'tree)
            (:name "scholarly-reading" :query "tag:scholarly-reading AND tag:unread" :sort-order newest-first :key "s" :search-type 'tree)
            (:name "the-economist" :query "tag:economist AND tag:unread" :sort-order newest-first :key "e" :search-type 'tree)
            (:name "recent" :query "date:1week..today" :sort-order newest-first :key "e" :search-type 'tree)
            (:name "sent"    :query "tag:sent" :key "s")
            (:name "drafts"  :query "tag:draft":key "d"))))
#+end_src

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+begin_src emacs-lisp
  (setq org-ellipsis "⤵")
#+end_src

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

A workaround until https://github.com/hlissner/doom-emacs/issues/4832 is fixed.
#+begin_src emacs-lisp
  (use-package! org
    :defer t
    :config
    (defalias '+org--restart-mode-h #'ignore))
#+end_src

Quickly insert a block of =elisp= or =jupyter-python=.

#+begin_src emacs-lisp
  (after! org
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist
                 '("jp" . "src jupyter-python :async yes :exports code :results code")))
#+end_src

Show Greek letters and =LaTeX= math symbols (in =org= buffer) using normal
=LaTeX= syntax.
#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

Store my org files in =~/Dropbox/org=, maintain an inbox in Dropbox, define
the location of an index file (my main todo list).
#+begin_src emacs-lisp
  (defun blw/full-file-path (directory filename)
    "Return the absolute path of a file, given its filename and the directory it's in."
    (concat (file-name-as-directory directory) filename))

  (defun blw/org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (blw/full-file-path org-directory filename))

  (defun blw/persistent-file-path (filename)
    "Return the absolute address of a file in whatever persistent storage I'm using, given its relative name."
    (blw/full-file-path blw/org-persistent-directory filename))

  (defun blw/zettelkasten-path (filename)
    "Return the absolute path of a file in my zettelkasten."
    (concat (blw/persistent-file-path "zettelkasten/") filename))

  (setq! blw/org-persistent-directory "~/Dropbox/"
         org-directory (blw/persistent-file-path "org")
         org-index-file (blw/org-file-path "todos.org")
         org-gcal-file (blw/org-file-path "schedule.org")
         blw/org-reading-file (blw/org-file-path "reading.org")
         blw/org-fun-projects-file (blw/org-file-path "fun-projects.org")
         blw/org-zettel-inbox-file (blw/org-file-path "zettel-inbox.org")
         blw/zettelkasten (blw/zettelkasten-path ""))
#+end_src

Add more S-expressions =org-file-path= to the list to have them parsed for my org-agenda.

Ensure that a task can't be marked as done if it contains unfinished subtasks or
checklist items. This is handy for organizing "blocking" tasks hierarchically.
#+begin_src emacs-lisp
  (setq org-enforce-todo-checkbox-dependencies t)
#+end_src

Hide the category prefix from tasks. In practice, I've usually only got one or
two files of tasks, so prefixing tasks with the file they're stored in is mostly
redundant.

#+begin_src emacs-lisp
  (setq org-agenda-prefix-format '((agenda . " %i %?-12t% s")
                                   (todo . " %i ")
                                   (tags . " %i ")
                                   (search . " %i ")))
#+end_src

Restore the previous window setup after agenda is exited, and when the agenda is
opened, it should split the pane and open in the new pane without disturbing the
prior pane.
#+begin_src emacs-lisp
  (after! org
          (setq org-agenda-restore-windows-after-quit t
                org-agenda-window-setup 'other-window
                org-agenda-skip-scheduled-if-deadline-is-shown t
                org-agenda-skip-deadline-if-done t
                org-agenda-span 'week
                org-agenda-start-day nil))
#+end_src
I've got some custom agenda views that I use to visualize what I'm working on.

The "Personal agenda" view is a bit complicated; it displays:

1. My agenda for the next few days, including any recurring habits or scheduled
   events,
2. All the other, not-high-priority non-habit TODO items,
3. All the PENDING tasks, which are awaiting a response from someone else but
   still require my attention (I might need to ping someone, say), and
4. All the BLOCKED tasks, which are pending other tasks (but might be worth
   keeping an eye on anyway).

I effectively use the "A" priority to decide where I want to focus my attention
on a given day (I'll assign those priorities the night before, if I'm really on
top of things), so displaying them at the top makes sense.

A lot of this is based on [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron Bieber's agenda configuration]], including the
=skip-subtree-if-priority= and =skip-subtree-if-habit= functions, which I've
shamelessly stolen and re-prefixed.

#+begin_src emacs-lisp
  (defun hrs/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (defun hrs/org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  (setq org-agenda-custom-commands
        '(("p" "Personal agenda"
           ((agenda "")
            (todo "TODO|SHALLOW|DEEP"
                  ((org-agenda-skip-function '(or (org-agenda-skip-subtree-if 'scheduled)
                                                  (org-agenda-skip-subtree-if 'deadline)))
                   (org-agenda-overriding-header "Other tasks:")))
            (todo "INPROGRESS"
                  ((org-agenda-overriding-header "In progress:")))
            (todo "READ|SKIM|NOTES"
                  ((org-agenda-overriding-header "Reading:")))
            (todo "VET"
                  ((org-agenda-overriding-header "Vetting:")))))))
#+end_src

I consult my agenda pretty often, so I bind =C-c d= to open it a it faster. This
also copies any files I've sent through Drafts into my index file before
displaying the index, so they'll be in the agenda view, too.

#+begin_src emacs-lisp
  (defun hrs/dashboard ()
    (interactive)
    (org-agenda nil "p"))

  (global-set-key (kbd "C-c d") 'hrs/dashboard)
#+end_src

A nice visualizer for my =org-roam= graph.
#+begin_src emacs-lisp
  (after! org-roam-server
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8080
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))
#+end_src

My [[https://zettelkasten.de/][Zettelkasten]] setup with [[https://www.orgroam.com/][org-roam]].
#+begin_src emacs-lisp
  (defun blw/org-roam-graph-firefox (graph)
    (org-roam-server-mode t)
    (shell-command (concat blw/open-firefox " http://127.0.0.1:8080")))

  (defun blw/get-string-from-file (filePath)
    "Return filePath's file content."
    (concat (with-temp-buffer
              (insert-file-contents filePath)
              (buffer-string))))

  (after! org-roam
    ;; This must be a string because the variable gets used before the
    ;; convenience functions in this file get called.
    (setq org-roam-directory "~/Dropbox/zettelkasten"
          org-roam-db-update-method 'immediate
          org-roam-graph-executable "dot"
          org-roam-graph-shorten-titles 'wrap
          org-roam-graph-max-title-length 50
          org-roam-graph-viewer 'blw/org-roam-graph-firefox
          org-roam-graph-extra-config '(("overlap" . "no"))
          org-roam-graph-exclude-matcher '("index" "daily")
          org-roam-graph-executable "neato"
          org-roam-dailies-directory "daily/"
          +org-roam-open-buffer-on-find-file nil
          emacsql-sqlite3-executable (executable-find "sqlite3")
          org-roam-completion-everywhere nil
          org-roam-dailies-capture-templates
           '(("x" "default" entry
             #'org-roam-capture--get-point
             "* %?"
             :file-name "daily/%<%Y-%m-%d>"
             :head "#+title: %<%Y-%m-%d>\n\n")))

    (map! :map org-roam-mode-map
         (:prefix ("C-c n" . "org-roam")
           :desc "View backlinks" "l" #'org-roam
           :desc "Find file"      "f" #'org-roam-find-file
           :desc "Graph"          "g" #'org-roam-graph
           :desc "Today"          "d" #'org-roam-dailies-find-today
           :desc "Tomorrow"       "t" #'org-roam-dailies-find-tomorrow
           :desc "Yesterday"      "y" #'org-roam-dailies-find-yesterday
           :desc "Anyday"         "a" #'org-roam-dailies-find-date))

    (map! :map org-mode-map
          (:prefix ("C-c n" . "org-roam")
          :desc "Insert immediate link" "I" #'org-roam-insert-immediate
          :desc "Unlink"                "u" #'org-link-at-point-unlink
          :desc "Insert"                "i" #'org-roam-insert)))

  (add-hook! org-roam-mode (org-roam-bibtex-mode))

  (require 'subr-x) ;; for `when-let'

  (defun org-link-at-point-unlink ()
    "Replace link at point with description."
    (interactive)
    (when-let ((el (org-element-context))
           (b (and (eq (org-element-type el) 'link)
               (org-element-property :contents-begin el)))
           (e (org-element-property :contents-end el))
           (contents (buffer-substring-no-properties b e))
           (b (org-element-property :begin el))
           (e (org-element-property :end el)))
      (delete-region b e)
      (insert contents)))
#+end_src

Use this to take screenshots and embed them in =org= files. Note that
=screencapture= is the tool to use for MacOS. Though =org-download= supports
other tools for other OSs.
#+begin_src emacs-lisp
  (setq org-download-image-dir "screenshots/")
  (setq org-download-image-org-width 500)
#+end_src

For adding citations in org.
#+begin_src emacs-lisp
  (use-package! org-ref
    :after org
    :config
    ;; see org-ref for use of these variables
    (setq org-ref-default-bibliography (blw/zettelkasten-path "references.bib")
          reftex-default-bibliography (blw/zettelkasten-path "references.bib")
          bibtex-completion-bibliography (blw/zettelkasten-path "references.bib")
          bibtex-completion-library-path (blw/zettelkasten-path "bibtex.pdfs")
          bibtex-completion-notes-path (blw/zettelkasten-path "helm-bibtex-notes")))
#+end_src

More meta-data for my annotated bibliography.
#+begin_src emacs-lisp
  (use-package! org-roam-bibtex
    :after org-roam
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (require 'org-ref))
#+end_src

Higher resolution on PDFs.
#+begin_src emacs-lisp
  (setq doc-view-resolution 192)
#+end_src


Define a few common tasks as capture templates. Specifically, I frequently:

- Add things I might want to read to =reading.org=
- Add website/CV updates
- Add ideas for zettelkasten notes
- Probably more in the future...

#+begin_src emacs-lisp
  (after! org
          (setq org-capture-templates nil)
          (setq org-capture-templates
                '(("r" "Reading material"
                   entry
                   (file blw/org-reading-file)
                   "* %?\n")
                  ("c" "CV/Website updates"
                   entry
                   (file "~/Dropbox/org/cv-website.org")
                   "* %?\n")
                  ("z" "Zettel inbox"
                   entry
                   (file blw/org-zettel-inbox-file)
                   "* %?\n")
                  ("t" "TODO inbox"
                   entry
                   (file org-index-file)
                   "* TODO %?\n")
                  ("f" "Fun projects"
                   entry
                   (file blw/org-fun-projects-file)
                   "* %?\n"))))
#+end_src

I want to be able to quickly open up my list of zettel topics.

#+begin_src emacs-lisp
  (defun blw/zettel-topics ()
    (interactive)
    (find-file blw/org-zettel-inbox-file))

  (defun blw/todos ()
    (interactive)
    (find-file org-index-file))

  (defun blw/fun-projects ()
    (interactive)
    (find-file blw/org-fun-projects-file))

  (defun blw/reading-list ()
    (interactive)
    (find-file blw/org-reading-file))
#+end_src

Bind a few handy keys.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

Allow export to markdown and beamer (for presentations).

#+begin_src emacs-lisp
  (after! org
    (use-package! ox-twbs
      :defer t)

    (require 'ox-md)
    (require 'ox-beamer)
    (require 'ox-twbs))
  #+end_src

Use =htmlize= to ensure that exported code blocks use syntax highlighting.

#+begin_src emacs-lisp
  (use-package! htmlize
      :defer t)
#+end_src

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.
#+begin_src emacs-lisp
  (setq org-html-postamble nil)
#+end_src

Some of the style elements are off if these two aren't set to =css=.
#+begin_src emacs-lisp
  (setq org-html-htmlize-output-type 'inline-css)
  (setq org-twbs-htmlize-output-type 'inline-css)
#+end_src


I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

Include the =minted= package in all of my LaTeX exports.

#+begin_src emacs-lisp
  (after! org-tempo
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted))
#+end_src

Put LaTeX table captions below the table.
#+begin_src emacs-lisp
  (setq org-latex-caption-above nil)
#+end_src

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+begin_src emacs-lisp
  (setq TeX-PDF-mode t)
#+end_src

Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.

#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+end_src

Start a new line when line length exceeds 80 characters.

#+begin_src
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
#+end_src


I write prose in several modes: I might be editing an Org document, or a commit
message, or an email. These are the main ones, with sub-items being /derived/
from their parents:

- =git-commit-mode=
- =text-mode=
  - =markdown-mode=
    - =gfm-mode=
  - =message-mode=
    - =mu4e-compose-mode=
  - =org-mode=

Recall that derived modes "inherit" their parent's hooks, so a hook added onto
e.g. =text-mode= will also be executed by =mu4e-compose-mode=.

There are some exceptions, but I can usually associate a hook with every
prose-related mode, so I store those in a list:

#+begin_src emacs-lisp
  (defvar prose-modes
    '(gfm-mode
      git-commit-mode
      markdown-mode
      message-mode
      mu4e-compose-mode
      org-mode
      text-mode))

  (defvar prose-mode-hooks
    (mapcar (lambda (mode) (intern (format "%s-hook" mode)))
            prose-modes))
#+end_src


=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.

#+begin_src emacs-lisp
  (dolist (hook prose-mode-hooks)
    (add-hook hook 'turn-on-auto-fill))
#+end_src


Enable Org-style tables.

#+begin_src emacs-lisp
  (add-hook 'git-commit-mode-hook 'orgtbl-mode)
  (add-hook 'markdown-mode-hook 'orgtbl-mode)
  (add-hook 'message-mode-hook 'orgtbl-mode)
#+end_src

Use the [[https://elpa.gnu.org/packages/orgalist.html][=orgalist=]] package for more convenient list manipulation.

#+begin_src emacs-lisp
  (use-package! orgalist
    :defer t
    :config
    (add-hook 'git-commit-mode-hook 'orgalist-mode)
    (add-hook 'markdown-mode-hook 'orgalist-mode)
    (add-hook 'message-mode-hook 'orgalist-mode))
#+end_src

Hide dotfiles by default, but toggle their visibility with =.=.

#+begin_src emacs-lisp
  (use-package! dired-hide-dotfiles
    :defer t
    :config
    (dired-hide-dotfiles-mode)
    (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
#+end_src

These are the switches that get passed to =ls= when =dired= gets a list of
files. We're using:

- =l=: Use the long listing format.
- =h=: Use human-readable sizes.
- =v=: Sort numbers naturally.
- =A=: Almost all. Doesn't include "=.=" or "=..=".

That said, I'd usually like to hide those extra details.
=dired-hide-details-mode= can be toggled with =(=.

#+begin_src emacs-lisp
  (setq-default dired-listing-switches "-lhvA")
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
#+end_src

Kill buffers of files/directories that are deleted in =dired=.

#+begin_src emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+end_src

Always copy directories recursively instead of asking every time.

#+begin_src emacs-lisp
  (setq dired-recursive-copies 'always)
#+end_src

Ask before recursively /deleting/ a directory, though.

#+begin_src emacs-lisp
  (setq dired-recursive-deletes 'top)
#+end_src

Files are normally moved and copied synchronously. This is fine for small or
local files, but copying a large file or moving a file across a mounted network
drive blocks Emacs until the process is completed. Unacceptable!

This uses =emacs-async= to make =dired= perform actions asynchronously.

#+begin_src emacs-lisp
  (use-package! async
    :defer t
    :config
    (dired-async-mode 1))
#+end_src

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+begin_src emacs-lisp
  (defun hrs/visit-emacs-config ()
    (interactive)
    (find-file "~/.doom.d/config.org"))

  (global-set-key (kbd "C-c e") 'hrs/visit-emacs-config)
#+end_src


Assume that I always want to kill the current buffer when hitting =C-x k=.

#+begin_src emacs-lisp
  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+end_src


The =helpful= package provides, among other things, more context in Help
buffers.

#+begin_src emacs-lisp
  (use-package helpful)

  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
#+end_src


#+begin_src emacs-lisp
  (hrs/append-to-path "/usr/local/bin")
#+end_src


Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src


Never use tabs. Tabs are the devil’s whitespace.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+begin_src emacs-lisp
  (use-package! which-key
    :defer t
    :config (which-key-mode))
#+end_src

I use =ivy= and =counsel= as my completion framework.

This configuration:

- Uses =counsel-M-x= for command completion,
- Replaces =isearch= with =swiper=,
- Uses =smex= to maintain history,
- Enables fuzzy matching everywhere except swiper (where it's thoroughly
  unhelpful), and
- Includes recent files in the switch buffer.

#+begin_src emacs-lisp
  (use-package! counsel
    :defer t
    :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)

    :config
    (use-package! flx)
    (use-package! smex)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))
#+end_src


When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+begin_src emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+end_src

Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.

#+begin_src emacs-lisp
    (use-package! engine-mode
        :defer t)
    (require 'engine-mode)

    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g")

    (defengine google-scholar
      "https://scholar.google.com/scholar?hl=en&q=%s"
      :keybinding "s")

    (defengine rfcs
      "http://pretty-rfc.herokuapp.com/search?q=%s")

    (engine-mode t)
#+end_src

Make commenting better with =M-;=

#+begin_src emacs-lisp
  (use-package! comment-dwim-2
    :defer t
    :config
    (global-set-key (kbd "M-;") 'comment-dwim-2))
#+end_src

A useful little timer within emacs.
#+begin_src emacs-lisp
  (use-package! chronos
    :defer t
    :config
    (setq chronos-expiry-functions '(chronos-dunstify)))
#+end_src

In =evil-mode=, I just want to mash "jk" and have it escape, regardless of the
actual order those keys register.
#+begin_src emacs-lisp
  (setq evil-escape-unordered-key-sequence t)
#+end_src

#+begin_src emacs-lisp
  (setq lsp-clients-clangd-args '("-j=3"
                                  "--background-index"
                                  "--clang-tidy"
                                  "--completion-style=detailed"
                                  "--header-insertion=never"
                                  "--header-insertion-decorators=0"))
  (after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src
