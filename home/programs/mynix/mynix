#!/usr/bin/env nix-shell
#! nix-shell -i bash -p dmidecode python3

set -eu -o pipefail
shopt -s failglob

HOME_MANAGER_VERSION=21.05
NIX_CONFIG_BASE_DIR=${HOME}/workspace/dotfiles
PYTHON=$(which python3)
declare -A machines
machines['MacBookPro11,5']=boston.nix
machines['20A8S1BJ00']=kansas.nix
machines['Precision Tower 3620']=isec-desktop.nix

system_config() {
  POSSIBLE_MNT=$1

  # Nix configuration
  sudo cp ${NIX_CONFIG_BASE_DIR}/system/configuration.nix ${POSSIBLE_MNT}/etc/nixos/
  sudo cp -r ${NIX_CONFIG_BASE_DIR}/system/machine/ ${POSSIBLE_MNT}/etc/nixos/
  sudo cp -r ${NIX_CONFIG_BASE_DIR}/system/wm/ ${POSSIBLE_MNT}/etc/nixos/
  sudo cp -r ${NIX_CONFIG_BASE_DIR}/nix/ ${POSSIBLE_MNT}/etc/nixos/

  machine_id=$(head -c4 /dev/urandom | od -A none -t x4)
  sudo sed -i "s/REPLACE_ME/${machine_id}/g" ${POSSIBLE_MNT}/etc/nixos/machine/current.nix
  model="$(sudo dmidecode -s system-product-name)"

  if [ ! -f ${POSSIBLE_MNT}/etc/nixos/machine/current.nix ]; then
    echo "Linking current machine's configuration (${model})"
    sudo ln -s "${POSSIBLE_MNT}/etc/nixos/machine/${machines[${model}]}" ${POSSIBLE_MNT}/etc/nixos/machine/current.nix
  fi
}

system_fresh_install() {
  fresh_install
  system_config "/mnt"
  nixos-install
}

system_install() {
  system_config ""
  sudo nixos-rebuild switch --upgrade
}

system_refresh() {
  system_config
  sudo nixos-rebuild switch
}

hm_install() {
  # Home manager
  mkdir -p $HOME/.config/nixpkgs/
  cp -r home/* $HOME/.config/nixpkgs/
  nix-channel --add https://github.com/nix-community/home-manager/archive/release-${HOME_MANAGER_VERSION}.tar.gz home-manager
  nix-channel --update
  export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
  nix-shell '<home-manager>' -A install

  hm_refresh
}

hm_refresh() {
  if [ ! -f $HOME/.config/nixpkgs/home.nix ]; then
    echo "Linking home.nix..."
    ln -s $HOME/workspace/dotfiles/home/home.nix $HOME/.config/nixpkgs/home.nix
  fi
  home-manager switch
}

install() {
  system_install
  hm_install

  # Set screenlock wallpaper
  betterlockscreen -u home/resources/background_image
  exit $?
}

refresh() {
  system_refresh
  if [ $? == 0 ]; then
    hm_refresh
  fi
  exit $?
}

update() {
  pushd ${NIX_CONFIG_BASE_DIR}
  $PYTHON ${NIX_CONFIG_BASE_DIR}/nix/update.py
  popd
  if [ $? == 0 ]; then
    refresh
  fi
  exit $?
}

usage() {
  echo "Usage: $0 [install|refresh|update]" 1>&2
  exit 1
}

fresh_install() {
  set -x
  set -e

  if [ ! "$USER" = "root" ]; then
    echo "Must be run as root!"
    exit 1
  fi

  read -p "What disk to format (e.g. /dev/sda, /dev/nvme0n1)? " DISK
  ls $DISK*

  INST_UUID=$(dd if=/dev/urandom bs=1 count=100 2>/dev/null | tr -dc 'a-z0-9' | cut -c-6)
  INST_ID=nixos

  INST_PRIMARY_DISK=$(echo $DISK | cut -f1 -d\ )

  # not set for single disk or striped
  INST_VDEV=
  INST_PARTSIZE_ESP=2 # in GB
  INST_PARTSIZE_BPOOL=4
  INST_PARTSIZE_SWAP=16

  # root pool size, use all remaining disk if not set
  INST_PARTSIZE_RPOOL=

  # wipe solid-state drives with the generic tool blkdiscard, to clean previous partition tables and improve performance
  for i in ${DISK}; do
    blkdiscard -f $i &
  done
  wait

  for i in ${DISK}; do
    sgdisk --zap-all $i
    sgdisk -n1:1M:+${INST_PARTSIZE_ESP}G -t1:EF00 $i
    sgdisk -n2:0:+${INST_PARTSIZE_BPOOL}G -t2:BE00 $i
    if [ "${INST_PARTSIZE_SWAP}" != "" ]; then
      sgdisk -n4:0:+${INST_PARTSIZE_SWAP}G -t4:8200 $i
    fi
    if [ "${INST_PARTSIZE_RPOOL}" = "" ]; then
      sgdisk -n3:0:0   -t3:BF00 $i
    else
      sgdisk -n3:0:+${INST_PARTSIZE_RPOOL}G -t3:BF00 $i
    fi
    sgdisk -a1 -n5:24K:+1000K -t5:EF02 $i
  done


  # create boot pool
  disk_num=0
  for i in $DISK; do
    disk_num=$(( $disk_num + 1 ))
  done

  if [ $disk_num -gt 1 ]; then
    INST_VDEV_BPOOL="mirror"
  else
    INST_VDEV_BPOOL="disk"
  fi


  zpool create \
  -d -o feature@async_destroy=enabled \
  -o feature@bookmarks=enabled \
  -o feature@embedded_data=enabled \
  -o feature@empty_bpobj=enabled \
  -o feature@enabled_txg=enabled \
  -o feature@extensible_dataset=enabled \
  -o feature@filesystem_limits=enabled \
  -o feature@hole_birth=enabled \
  -o feature@large_blocks=enabled \
  -o feature@lz4_compress=enabled \
  -o feature@spacemap_histogram=enabled \
      -o ashift=12 \
      -o autotrim=on \
      -O acltype=posixacl \
      -O canmount=off \
      -O compression=lz4 \
      -O devices=off \
      -O normalization=formD \
      -O relatime=on \
      -O xattr=sa \
      -O mountpoint=/boot \
      -R /mnt \
      bpool_$INST_UUID \
      $INST_VDEV_BPOOL \
      $(for i in ${DISK}; do
        printf "${i}2 ";
        done)

  # creat root pool
  zpool create \
      -o ashift=12 \
      -o autotrim=on \
      -R /mnt \
      -O acltype=posixacl \
      -O canmount=off \
      -O compression=zstd \
      -O dnodesize=auto \
      -O normalization=formD \
      -O relatime=on \
      -O xattr=sa \
      -O mountpoint=/ \
      rpool_$INST_UUID \
      $INST_VDEV \
    $(for i in ${DISK}; do
        printf "${i}3 ";
      done)

  # create encrypted root container
  zfs create \
  -o canmount=off \
  -o mountpoint=none \
  -o encryption=aes-256-gcm \
  -o keylocation=prompt \
  -o keyformat=passphrase \
  rpool_$INST_UUID/$INST_ID

  # Create other system datasets
  zfs create -o canmount=off -o mountpoint=none bpool_$INST_UUID/$INST_ID
  zfs create -o canmount=off -o mountpoint=none bpool_$INST_UUID/$INST_ID/BOOT
  zfs create -o canmount=off -o mountpoint=none rpool_$INST_UUID/$INST_ID/ROOT
  zfs create -o canmount=off -o mountpoint=none rpool_$INST_UUID/$INST_ID/DATA
  zfs create -o mountpoint=/boot -o canmount=noauto bpool_$INST_UUID/$INST_ID/BOOT/default
  zfs create -o mountpoint=/ -o canmount=off    rpool_$INST_UUID/$INST_ID/DATA/default
  zfs create -o mountpoint=/ -o canmount=off    rpool_$INST_UUID/$INST_ID/DATA/local
  zfs create -o mountpoint=/ -o canmount=noauto rpool_$INST_UUID/$INST_ID/ROOT/default
  zfs mount rpool_$INST_UUID/$INST_ID/ROOT/default
  zfs mount bpool_$INST_UUID/$INST_ID/BOOT/default
  for i in {usr,var,var/lib};
  do
      zfs create -o canmount=off rpool_$INST_UUID/$INST_ID/DATA/default/$i
  done
  for i in {home,root,srv,usr/local,var/log,var/spool};
  do
      zfs create -o canmount=on rpool_$INST_UUID/$INST_ID/DATA/default/$i
  done
  chmod 750 /mnt/root
  for i in {nix,}; do
      zfs create -o canmount=on -o mountpoint=/$i rpool_$INST_UUID/$INST_ID/DATA/local/$i
  done


  # Datasets for immutable root filesystem
  zfs create -o canmount=on rpool_$INST_UUID/$INST_ID/DATA/default/state
  for i in {/etc/nixos,/etc/cryptkey.d}; do
    mkdir -p /mnt/state/$i /mnt/$i
    mount -o bind /mnt/state/$i /mnt/$i
  done
  zfs create -o mountpoint=/ -o canmount=noauto rpool_$INST_UUID/$INST_ID/ROOT/empty
  zfs snapshot rpool_$INST_UUID/$INST_ID/ROOT/empty@start

  # Format and mount ESP
  for i in ${DISK}; do
    mkfs.vfat -n EFI ${i}1
    mkdir -p /mnt/boot/efis/${i##*/}1
    mount -t vfat ${i}1 /mnt/boot/efis/${i##*/}1
  done


  # Disable cache:
  mkdir -p /mnt/state/etc/zfs/
  rm -f /mnt/state/etc/zfs/zpool.cache
  touch /mnt/state/etc/zfs/zpool.cache
  chmod a-w /mnt/state/etc/zfs/zpool.cache
  chattr +i /mnt/state/etc/zfs/zpool.cache
}

while :; do
  PARAM=`echo $1 | awk -F= '{print $1}'`
  VALUE=`echo $1 | awk -F= '{print $2}'`
  case "$PARAM" in
    install)
      install
      ;;
    refresh)
      refresh
      ;;
    update)
      update
      ;;
    fresh)
      system_fresh_install
      ;;
    *)
      echo "ERROR: unknown parameter \"$PARAM\""
      usage
      ;;
  esac
  shift
done
shift $((OPTIND-1))
