#!/usr/bin/env nix-shell
#! nix-shell -i bash -p dmidecode python3 git

set -eu -o pipefail
shopt -s failglob

HOME_MANAGER_VERSION=21.11
DOTFILES_BASE=workspace/dotfiles
NIX_CONFIG_BASE_DIR=${HOME}/${DOTFILES_BASE}
GIT_HOME="https://github.com/iowaguy/dotfiles"

PYTHON=$(which python3)
GIT=$(which git)

declare -A machines
machines['MacBookPro11,5']=boston.nix
machines['20A8S1BJ00']=kansas.nix
machines['Precision Tower 3620']=isec-desktop.nix

system_config() {
  POSSIBLE_MNT=$1

  # Nix configuration
  sudo cp ${NIX_CONFIG_BASE_DIR}/system/configuration.nix ${POSSIBLE_MNT}/etc/nixos/
  sudo cp -r ${NIX_CONFIG_BASE_DIR}/system/machine/ ${POSSIBLE_MNT}/etc/nixos/
  sudo cp -r ${NIX_CONFIG_BASE_DIR}/system/wm/ ${POSSIBLE_MNT}/etc/nixos/
  sudo cp -r ${NIX_CONFIG_BASE_DIR}/nix/ ${POSSIBLE_MNT}/etc/nixos/

  model="$(sudo dmidecode -s system-product-name)"

  if [ ! -f ${POSSIBLE_MNT}/etc/nixos/machine/current.nix ]; then
    echo "Linking current machine's configuration (${model})"
    sudo ln -s "${POSSIBLE_MNT}/etc/nixos/machine/${machines[${model}]}" ${POSSIBLE_MNT}/etc/nixos/machine/current.nix
  fi
}

system_fresh_install() {
  if [ ! "$USER" = "root" ]; then
    echo "Must be run as root!"
    exit 1
  fi

  fresh_install
  system_config "/mnt"
  nixos-install -v --show-trace #--root /mnt
}

system_install() {
  system_config ""
  sudo nixos-rebuild switch
}

system_upgrade() {
  sudo nix-channel --add https://nixos.org/channels/nixos-${HOME_MANAGER_VERSION} nixos
  sudo nixos-rebuild switch --upgrade
}

hm_upgrade() {
  nix-channel --add https://github.com/nix-community/home-manager/archive/release-${HOME_MANAGER_VERSION}.tar.gz home-manager
  nix-channel --update

  home-manager switch
}

system_refresh() {
  system_config ""
  sudo nixos-rebuild switch
}

hm_install() {
  # Home manager
  mkdir -p $HOME/.config/nixpkgs/
  ln -f -s ${NIX_CONFIG_BASE_DIR}/home/home.nix $HOME/.config/nixpkgs/home.nix
  cp -r ${NIX_CONFIG_BASE_DIR}/home/{modules,programs,resources} $HOME/.config/nixpkgs/
  cp -r ${NIX_CONFIG_BASE_DIR}/nix $HOME/.config/

  nix-channel --add https://github.com/nix-community/home-manager/archive/release-${HOME_MANAGER_VERSION}.tar.gz home-manager
  nix-channel --update
  export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
  nix-shell '<home-manager>' -A install

  hm_refresh

  # Setup doom-emacs
  $GIT clone https://github.com/hlissner/doom-emacs $HOME/.emacs.d
  $HOME/.emacs.d/bin/doom install
}

hm_refresh() {
  if [ ! -f $HOME/.config/nixpkgs/home.nix ]; then
    echo "Linking home.nix..."
    ln -s ${NIX_CONFIG_BASE_DIR}/home/home.nix $HOME/.config/nixpkgs/home.nix
  fi
  home-manager switch
}

install() {
  system_install
  hm_install

  # Set screenlock wallpaper
  betterlockscreen -u ${NIX_CONFIG_BASE_DIR}/home/resources/background-image
  exit $?
}

upgrade() {
  system_upgrade
  hm_upgrade
  exit $?
}

refresh() {
  system_refresh
  if [ $? == 0 ]; then
    hm_refresh
  fi
  exit $?
}

update() {
  pushd ${NIX_CONFIG_BASE_DIR}
  $PYTHON ${NIX_CONFIG_BASE_DIR}/nix/update.py
  popd
  if [ $? == 0 ]; then
    refresh
  fi
  exit $?
}

usage() {
  echo "Usage: $0 [install|refresh|update]" 1>&2
  exit 1
}

fresh_install() {
  set -x
  set -e

  # ls /dev/disk/by-id/ata-*
  read -p "What disk to format (e.g. /dev/sda, /dev/nvme0n1)? " DISK
  # read -p "What disk to partition (e.g. /dev/disk/by-id/ata-VENDOR-ID-OF-THE-DRIVE)? " DISK
  read -p "What prefix should we use for partitions of $DISK (usually nothing or \"-part\")? " PART_PREFIX
  ls $DISK # this is just to check that it exists

  INST_PRIMARY_DISK=$(echo $DISK | cut -f1 -d\ )

  # wipe solid-state drives with the generic tool blkdiscard, to clean previous partition tables and improve performance
  blkdiscard -f $DISK &
  wait

  # remove all partitions on disk
  sgdisk --zap-all $DISK

  parted $DISK -- mklabel gpt

  # primary disk starts at 512MiB and ends 8GiB before the end of disk
  parted $DISK -- mkpart primary 512MiB 100%

  parted $DISK -- mkpart ESP fat32 1MiB 512MiB
  parted $DISK -- set 2 esp on

  mkfs.fat -F 32 -n boot ${DISK}${PART_PREFIX}2        # (for UEFI systems only)

  zpool create -f rpool ${DISK}${PART_PREFIX}1

  zfs set com.sun:auto-snapshot=true rpool

  # When set to "on," zfs will choose the best algorithm available.
  zfs set compression=on rpool

  # These are needed so users can access their own journals
  zfs set acltype=posix rpool
  zfs set xattr=sa rpool

  # Setup auto-snapshots
  zfs set com.sun:auto-snapshot=true rpool

  # Create other system datasets
  zfs create -p -o mountpoint=legacy rpool/local/root
  zfs create -p -o mountpoint=legacy rpool/local/nix
  zfs create -p -o mountpoint=legacy rpool/safe/home
  zfs create -p -o mountpoint=legacy rpool/safe/persist

  # Snapshot root partition before it has any data
  zfs snapshot rpool/local/root@blank

  # Mount root dataset
  mount -t zfs rpool/local/root /mnt

  # Mount boot partition
  mkdir -p /mnt/boot
  mount ${DISK}${PART_PREFIX}2 /mnt/boot

  # Mount /nix
  mkdir -p /mnt/nix
  mount -t zfs rpool/local/nix /mnt/nix

  # Mount /home
  mkdir -p /mnt/home
  mount -t zfs rpool/safe/home /mnt/home

  # This is the data I want to persist between reboots
  mkdir -p /mnt/persist
  mount -t zfs rpool/safe/persist /mnt/persist

  nixos-generate-config --root /mnt

  mkdir -p /root/workspace
  $GIT clone $GIT_HOME /root/$DOTFILES_BASE
}

while :; do
  PARAM=`echo $1 | awk -F= '{print $1}'`
  VALUE=`echo $1 | awk -F= '{print $2}'`
  case "$PARAM" in
    install)
      install
      ;;
    refresh)
      refresh
      ;;
    update)
      update
      ;;
    upgrade)
      upgrade
      ;;
    fresh)
      system_fresh_install
      ;;
    *)
      echo "ERROR: unknown parameter \"$PARAM\""
      usage
      ;;
  esac
  shift
done
shift $((OPTIND-1))
