#+TITLE: Emacs Configuration
#+AUTHOR: Ben Weintraub
#+EMAIL: ben@weintraub.xyz
#+OPTIONS: num:nil
#+PROPERTY: header-args:emacs-lisp :noweb yes :results none

#+begin_src emacs-lisp
  (defun blw/set-macos-vars ()
    (setq blw/open-firefox "open -a Firefox")
    (setq blw/screenshot "screencapture -i %s")

    ;; Bind =alt= to =super=
    (setq ns-alternate-modifier (quote super))

    ;; Bind =command= to =meta=
    (setq ns-command-modifier (quote meta))

    ;; Bind =fn= to =control=
    (setq ns-function-modifier (quote control)))

  (defun blw/set-linux-vars ()
    (setq blw/open-firefox "firefox --newtab --url")
    (setq blw/screenshot "scrot --select %s"))

  (defun blw/set-system-specific-vars ()
    (cond
     ((string-equal system-type "darwin") ;  macOS
      (blw/set-macos-vars))
     ((string-equal system-type "gnu/linux")
      (blw/set-linux-vars))))

  (blw/set-system-specific-vars)
#+end_src

#+begin_src emacs-lisp
  (setq user-full-name "Ben Weintraub"
        user-mail-address "ben@weintraub.xyz"
        calendar-latitude 42.35
        calendar-longitude -71.06
        calendar-location-name "Boston, MA"
        blw/dark-theme 'doom-one
        blw/light-theme 'doom-one-light)
#+end_src


I use the interactive command =apply-light-theme= when the screen is hard
to see (like out in the sun).

#+begin_src emacs-lisp
  (defun blw/apply-dark-theme ()
    "Apply the dark theme."
    (interactive)
    (load-theme blw/dark-theme t))

  (defun blw/apply-light-theme ()
    "Apply the light theme."
    (interactive)
    (load-theme blw/light-theme t))

  (use-package doom-themes
    :config
    (blw/apply-dark-theme))
#+end_src

This disables the bell altogether.
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src


When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src


I'm partial to Inconsolata.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+begin_src emacs-lisp
  (setq hrs/default-font "Inconsolata")
  (setq hrs/default-font-size 18)
  (setq hrs/current-font-size hrs/default-font-size)

  (setq hrs/font-change-increment 1.1)

  (defun hrs/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat hrs/default-font "-" (number-to-string hrs/current-font-size)))

  (defun hrs/set-font-size ()
    "Set the font to `hrs/default-font' at `hrs/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (hrs/font-code)))
      (if (assoc 'font default-frame-alist)
          (setcdr (assoc 'font default-frame-alist) font-code)
        (add-to-list 'default-frame-alist (cons 'font font-code)))
      (set-frame-font font-code)))

  (defun hrs/reset-font-size ()
    "Change font size back to `hrs/default-font-size'."
    (interactive)
    (setq hrs/current-font-size hrs/default-font-size)
    (hrs/set-font-size))

  (defun hrs/increase-font-size ()
    "Increase current font size by a factor of `hrs/font-change-increment'."
    (interactive)
    (setq hrs/current-font-size
          (ceiling (* hrs/current-font-size hrs/font-change-increment)))
    (hrs/set-font-size))

  (defun hrs/decrease-font-size ()
    "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq hrs/current-font-size
          (max 1
               (floor (/ hrs/current-font-size hrs/font-change-increment))))
    (hrs/set-font-size))

  (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
  (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
  (define-key global-map (kbd "C--") 'hrs/decrease-font-size)

  (hrs/reset-font-size)
#+end_src

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.
#+begin_src emacs-lisp
  (use-package! diff-hl
    :defer t
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

I prefer =IBuffer=, and have it mapped to =C-x C-b=
#+begin_src emacs-lisp
 (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Make full screen on startup, because this is the first thing I'm going to do anyway.

#+begin_src emacs-lisp
  (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src

I use =magit= to handle version control. It's lovely, but I tweak a few things:
- I bring up the status menu with =C-c m=.
- The default behavior of =magit= is to ask before pushing. I haven't had any
  problems with accidentally pushing, so I'd rather not confirm that every time.
- Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
  beyond 50 characters.
- I'd like to start in the insert state when writing a commit message.
#+begin_src emacs-lisp
  (use-package! magit
    :defer t
    :bind
    ("C-c m" . magit-status)

    :config
    (use-package! with-editor)

    (setq magit-push-always-verify nil
          git-commit-summary-max-length 50))
#+end_src


I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+begin_src emacs-lisp
  (use-package! projectile
    :defer t
    :config
    (setq projectile-completion-system 'default
          projectile-require-project-root nil))
#+end_src

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.
#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.
#+begin_src emacs-lisp
  (use-package! subword
    :defer t
    :config (global-subword-mode 1))
#+end_src

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.
#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

Ripgrep is great for searching for text searches (much faster than grep). With
this package, I can use it without leaving emacs.
#+begin_src emacs-lisp
  (use-package! rg
    :defer t)
#+end_src

If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
documentation.
#+begin_src emacs-lisp
  (use-package! eldoc
    :defer t
    :config
    (add-hook! 'emacs-lisp-mode-hook 'eldoc-mode))
#+end_src

Automagically do an =ls= when entering a new directory. Also set a cool eshell theme.
#+begin_src emacs-lisp
  (setq eshell-list-files-after-cd t)
  (eshell-git-prompt-use-theme 'robbyrussell)
#+end_src

Emacs shells should inherit the PATH from the system shell.
#+begin_src emacs-lisp
  (use-package! exec-path-from-shell
    :defer t
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize))
#+end_src

Including =org-tempo= restores the =<s=-style easy-templates that were
deprecated in Org 9.2.
#+begin_src emacs-lisp
  (use-package! org-tempo
    :after org)
#+end_src

I'd like the initial scratch buffer to be in Org:
#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
#+end_src


Images should be shown in-buffer by default, but not at full size.
#+begin_src emacs-lisp
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width nil)
#+end_src

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.
#+begin_src emacs-lisp
  (setq org-ellipsis "â¤µ")
#+end_src

Use syntax highlighting in source blocks while editing.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Quickly insert a block of =elisp= or =jupyter-python=.

#+begin_src emacs-lisp
  (after! org
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist
                 '("jp" . "src jupyter-python :async yes :exports code :results code")))
#+end_src

Show Greek letters and =LaTeX= math symbols (in =org= buffer) using normal
=LaTeX= syntax.
#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

Store my org files in =~/workspace/resources/org=, define
the location of an index file (my main todo list).
#+begin_src emacs-lisp
  (defun blw/full-file-path (directory filename)
    "Return the absolute path of a file, given its filename and the directory it's in."
    (concat (file-name-as-directory directory) filename))

  (defun blw/org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (blw/full-file-path org-directory filename))

  (defun blw/persistent-file-path (filename)
    "Return the absolute address of a file in whatever persistent storage I'm using, given its relative name."
    (blw/full-file-path blw/org-persistent-directory filename))

  (defun blw/zettelkasten-path (filename)
    "Return the absolute path of a file in my zettelkasten."
    (concat (blw/persistent-file-path "zettelkasten/") filename))

  (setq! blw/org-persistent-directory "~/workspace/resources/"
         org-directory (blw/persistent-file-path "org")
         org-index-file (blw/org-file-path "todos.org")
         org-gcal-file (blw/org-file-path "schedule.org")
         blw/org-cs-reading-file (blw/org-file-path "reading.org")
         blw/org-writing-reading-file (blw/org-file-path "reading_writing.org")
         blw/org-fun-projects-file (blw/org-file-path "fun-projects.org")
         blw/org-zettel-inbox-file (blw/org-file-path "zettel-inbox.org")
         blw/zettelkasten (blw/zettelkasten-path ""))
#+end_src

Ensure that a task can't be marked as done if it contains unfinished subtasks or
checklist items. This is handy for organizing "blocking" tasks hierarchically.
#+begin_src emacs-lisp
  (setq org-enforce-todo-checkbox-dependencies t)
#+end_src

A nice visualizer for my =org-roam= graph.
#+begin_src emacs-lisp
  (use-package! websocket
      :after org-roam)

  (use-package! org-roam-ui
      :after org-roam
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))
#+end_src

My [[https://zettelkasten.de/][Zettelkasten]] setup with [[https://www.orgroam.com/][org-roam]].
#+begin_src emacs-lisp
  (defun blw/get-string-from-file (filePath)
    "Return filePath's file content."
    (concat (with-temp-buffer
              (insert-file-contents filePath)
              (buffer-string))))

  (after! org-roam
    ;; This must be a string because the variable gets used before the
    ;; convenience functions in this file get called.
    (setq org-roam-directory "~/workspace/resources/zettelkasten"
          org-roam-db-update-method 'immediate
          org-roam-graph-executable "dot"
          org-roam-graph-shorten-titles 'wrap
          org-roam-graph-max-title-length 50
          org-roam-graph-viewer 'org-roam-ui-open
          org-roam-preview-function '(lambda () "")
          org-roam-graph-extra-config '(("overlap" . "no"))
          org-roam-graph-exclude-matcher '("index" "daily")
          org-roam-graph-executable "neato"
          org-roam-dailies-directory "daily/"
          +org-roam-open-buffer-on-find-file nil
          emacsql-sqlite3-executable (executable-find "sqlite3")
          org-roam-completion-everywhere nil
          org-roam-dailies-capture-templates
           '(("x" "default" entry
             #'org-roam-capture--get-point
             "* %?"
             :file-name "daily/%<%Y-%m-%d>"
             :head "#+title: %<%Y-%m-%d>\n\n")))

    (map! :map org-mode-map
          (:prefix ("C-c n" . "org-roam")
          :desc "Insert"                "i" #'org-roam-node-insert
          :desc "Unlink"                "u" #'org-link-at-point-unlink)))

  (map! "C-c n d" :desc "Today" #'org-journal-new-entry)
  (map! "C-c n a" :desc "Any day" #'org-journal-new-scheduled-entry)

  (defun blw/visit-roam-outline ()
    (interactive)
    (find-file "~/workspace/resources/zettelkasten/20220110102107-outlines.org"))

  (map! :leader
    (:prefix-map ("n" . "notes")
      (:prefix ("r" . "roam")
        :desc "Open outline"           "o" #'blw/visit-roam-outline
        :desc "Unlink"                 "u" #'org-link-at-point-unlink
        :desc "Cite"                   "c" #'citar-insert-citation
        :desc "Open paper notes"       "p" #'citar-open-notes)))


  (require 'subr-x) ;; for `when-let'

  (defun org-link-at-point-unlink ()
    "Replace link at point with description."
    (interactive)
    (when-let ((el (org-element-context))
           (b (and (eq (org-element-type el) 'link)
               (org-element-property :contents-begin el)))
           (e (org-element-property :contents-end el))
           (contents (buffer-substring-no-properties b e))
           (b (org-element-property :begin el))
           (e (org-element-property :end el)))
      (delete-region b e)
      (insert contents)))
#+end_src

[[https://github.com/bdarcus/citar][Citar]] for citations.
#+begin_src emacs-lisp
  (defun blw/citar--open-note (keys-entries)
    (identity (car key-entry) (cdr key-entry)))

  (use-package citar
    :custom
    (citar-bibliography (blw/zettelkasten-path "references.bib"))
    (citar-notes-paths (list (blw/persistent-file-path "zettelkasten/")))
    (citar-default-action 'blw/citar--open-note))
#+end_src

Want the journal to display weekly, not daily files.
#+begin_src emacs-lisp
(setq! org-journal-file-type 'weekly
       org-journal-file-header 'blw/org-journal-file-header-func
       org-journal-time-format "plan")

(defun blw/org-journal-file-header-func ()
  "Custom function to create journal header."
  (concat
    (pcase org-journal-file-type
      (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
      (`weekly "#+TITLE: Weekly Journal\n#+STARTUP: showeverything")
      (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
      (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))
#+end_src

Use this to take screenshots and embed them in =org= files. Note that
=screencapture= is the tool to use for MacOS. Though =org-download= supports
other tools for other OSs.
#+begin_src emacs-lisp
  (setq org-download-image-dir "screenshots/")
  (setq org-download-image-org-width 500)
#+end_src

For adding citations in org.
#+begin_src emacs-lisp
  (use-package! org-ref
    :after org
    :config
    ;; see org-ref for use of these variables
    (setq org-ref-default-bibliography (blw/zettelkasten-path "references.bib")
          reftex-default-bibliography (blw/zettelkasten-path "references.bib")
          bibtex-completion-bibliography (blw/zettelkasten-path "references.bib")
          bibtex-completion-library-path (blw/zettelkasten-path "bibtex.pdfs")
          bibtex-completion-notes-path blw/zettelkasten))
#+end_src

Higher resolution on PDFs.
#+begin_src emacs-lisp
  (setq doc-view-resolution 192)
#+end_src


Bind a few handy keys.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

Allow export to markdown and beamer (for presentations).
#+begin_src emacs-lisp
    (use-package! ox-twbs
      :after org
      :config
      (require 'ox-md)
      (require 'ox-beamer)
      (require 'ox-twbs))
#+end_src

Use =htmlize= to ensure that exported code blocks use syntax highlighting.
#+begin_src emacs-lisp
  (use-package! htmlize
      :defer t)
#+end_src

Some of the style elements are off if these two aren't set to =css=.
#+begin_src emacs-lisp
  (setq org-html-htmlize-output-type 'inline-css)
  (setq org-twbs-htmlize-output-type 'inline-css)
#+end_src


Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.
#+begin_src emacs-lisp
  (add-hook! 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)))
#+end_src

I write prose in several modes: I might be editing an Org document, or a commit
message, or an email. These are the main ones, with sub-items being /derived/
from their parents:

- =git-commit-mode=
- =text-mode=
  - =markdown-mode=
    - =gfm-mode=
  - =message-mode=
    - =mu4e-compose-mode=
  - =org-mode=

Recall that derived modes "inherit" their parent's hooks, so a hook added onto
e.g. =text-mode= will also be executed by =mu4e-compose-mode=.

There are some exceptions, but I can usually associate a hook with every
prose-related mode, so I store those in a list:

#+begin_src emacs-lisp
  (defvar prose-modes
    '(gfm-mode
      git-commit-mode
      markdown-mode
      message-mode
      org-mode
      text-mode))

  (defvar prose-mode-hooks
    (mapcar (lambda (mode) (intern (format "%s-hook" mode)))
            prose-modes))
#+end_src

Hide dotfiles by default, but toggle their visibility with =.=.
#+begin_src emacs-lisp
  (use-package! dired-hide-dotfiles
    :defer t
    :config
    (dired-hide-dotfiles-mode)
    (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
#+end_src

These are the switches that get passed to =ls= when =dired= gets a list of
files. We're using:
- =l=: Use the long listing format.
- =h=: Use human-readable sizes.
- =v=: Sort numbers naturally.
- =A=: Almost all. Doesn't include "=.=" or "=..=".

That said, I'd usually like to hide those extra details.
=dired-hide-details-mode= can be toggled with =(=.
#+begin_src emacs-lisp
  (setq-default dired-listing-switches "-lhvA")
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
#+end_src

Kill buffers of files/directories that are deleted in =dired=.
#+begin_src emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+end_src

Always copy directories recursively instead of asking every time.
#+begin_src emacs-lisp
  (setq dired-recursive-copies 'always)
#+end_src

Ask before recursively /deleting/ a directory, though.
#+begin_src emacs-lisp
  (setq dired-recursive-deletes 'top)
#+end_src

Files are normally moved and copied synchronously. This is fine for small or
local files, but copying a large file or moving a file across a mounted network
drive blocks Emacs until the process is completed. Unacceptable!

This uses =emacs-async= to make =dired= perform actions asynchronously.
#+begin_src emacs-lisp
  (use-package! async
    :defer t
    :config
    (dired-async-mode 1))
#+end_src

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+begin_src emacs-lisp
  (defun blw/visit-emacs-config ()
    (interactive)
    (find-file "~/.doom.d/config.org"))

  (global-set-key (kbd "C-c e") 'blw/visit-emacs-config)
#+end_src


Assume that I always want to kill the current buffer when hitting =C-x k=.
#+begin_src emacs-lisp
  (defun blw/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'blw/kill-current-buffer)
#+end_src


The =helpful= package provides, among other things, more context in Help
buffers.
#+begin_src emacs-lisp
  (use-package! helpful)
#+end_src


Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.
#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

Never use tabs. Tabs are the devil's whitespace.
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.
#+begin_src emacs-lisp
  (defun blw/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun blw/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'blw/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'blw/split-window-right-and-switch)
#+end_src

Make commenting better with =M-;=
#+begin_src emacs-lisp
  (use-package! comment-dwim-2
    :defer t
    :config
    (global-set-key (kbd "M-;") 'comment-dwim-2))
#+end_src

In =evil-mode=, I just want to mash "jk" and have it escape, regardless of the
actual order those keys register.
#+begin_src emacs-lisp
  (setq evil-escape-unordered-key-sequence t)
#+end_src

This is for the C/C++ LSP which uses =clangd=.
#+begin_src emacs-lisp
  (setq lsp-clients-clangd-args '("-j=3"
                                  "--background-index"
                                  "--clang-tidy"
                                  "--completion-style=detailed"
                                  "--header-insertion=never"
                                  "--header-insertion-decorators=0"))
  (after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src

Enable some basic stuff for writing Promela.
#+begin_src emacs-lisp
  (use-package! promela-mode)
  (autoload 'promela-mode "promela-mode" "PROMELA mode" nil t)
  (setq auto-mode-alist
        (append
          (list (cons "\\.promela$"  'promela-mode)
          (cons "\\.spin$"     'promela-mode)
          (cons "\\.pml$"      'promela-mode)
          ;; (cons "\\.other-extensions$"     'promela-mode)
                )
          auto-mode-alist))
#+end_src

#+begin_src emacs-lisp
  (setq doom-modeline-height 10)
#+end_src

Enable Prolog mode.
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
  (add-to-list 'auto-mode-alist '("\\.m\\'" . mercury-mode))
#+end_src
